/* eslint-disable react/no-did-update-set-state */
// Should we store chat data in this component's state or in the
// redux store?
import React, { PureComponent } from 'react';
import PropTypes from 'prop-types';
import ChatLayout from '../../Components/Chat/Chat';

class Chat extends PureComponent {
  state = {
    messages: [],
    isWaitingForUpdatedLog: false,
  };

  componentDidMount() {
    const { log } = this.props;
    if (log[0].text) {
      this.setState({ messages: [log[0]] });
    }
  }

  componentDidUpdate(prevProps) {
    const {
      log,
      index,
      reset,
      roomId,
      changingIndex,
      setCurrentMembers,
    } = this.props;
    const { isWaitingForUpdatedLog } = this.state;
    const didLogChange = prevProps.log !== log;
    const didIndexChange = index !== prevProps.index;
    const didRoomChange = roomId !== prevProps.roomId;

    if (didRoomChange) {
      this.setState({ isWaitingForUpdatedLog: true });
    }

    if (didLogChange) {
      this.setState({
        messages: [log[0]],
        isWaitingForUpdatedLog: false,
      });
    }
    if (changingIndex) {
      let currentMembers = [];
      const messages = log.filter((entry, i) => {
        if (entry.autogenerated && i <= index) {
          if (entry.text.includes('joined')) {
            currentMembers.push({ user: entry.user });
          } else if (entry.text.includes('left')) {
            currentMembers = currentMembers.filter((member) => {
              return entry.user._id !== member.user._id;
            });
          }
        }
        return i <= index && entry;
      });
      this.setState({ messages });
      reset(); // Reset sets 'skipping' to false in Containers/Replater/Replayer.js
      const map = new Map();
      const uniqueMembers = [];
      // eslint-disable-next-line no-restricted-syntax
      for (const member of currentMembers) {
        if (!map.has(member.user._id)) {
          map.set(member.user._id, true);
          uniqueMembers.push(member);
        }
      }
      setCurrentMembers(uniqueMembers);
    } else if (didIndexChange && !isWaitingForUpdatedLog) {
      this.setState((prevState) => ({
        messages: [...prevState.messages, log[index]],
      }));
    }
  }

  render() {
    const { isSimplified, changingIndex } = this.props;
    const { messages } = this.state;
    return (
      <ChatLayout
        log={messages}
        replayer
        changingIndex={changingIndex}
        expanded
        isSimplified={isSimplified}
      />
    );
  }
}

Chat.propTypes = {
  log: PropTypes.arrayOf(PropTypes.shape({})).isRequired,
  index: PropTypes.number.isRequired,
  reset: PropTypes.func.isRequired,
  roomId: PropTypes.string.isRequired,
  changingIndex: PropTypes.bool.isRequired,
  setCurrentMembers: PropTypes.func.isRequired,
  isSimplified: PropTypes.bool,
};

Chat.defaultProps = {
  isSimplified: false,
};

export default Chat;
